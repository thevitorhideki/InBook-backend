generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int                   @id @default(autoincrement())
  username  String                @unique
  email     String                @unique
  password  String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  profile   Profile?
  reviews   Review[]
  books     UserBookInteraction[]
}

model Profile {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  avatarUrl String?
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Book {
  id               Int                   @id @default(autoincrement())
  title            String
  description      String
  genres           Genre[]
  language         Language
  isbn             String                @unique
  pages            Int
  duration         Int
  publicationYear  Int?
  coverImageUrl    String?
  ebookFileUrl     String?
  audiobookFileUrl String?
  authorId         Int
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  author           Author                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reviews          Review[]
  interactions     UserBookInteraction[]
}

model Author {
  id          Int     @id @default(autoincrement())
  name        String
  avatarUrl   String?
  about       String?
  birthYear   Int?
  nationality String?
  books       Book[]
}

model Review {
  id              Int      @id @default(autoincrement())
  userId          Int
  bookId          Int
  recommended     Boolean
  enjoyedContent  Boolean
  enjoyedNarrator Boolean
  title           String?
  content         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  book            Book     @relation(fields: [bookId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model UserBookInteraction {
  id              Int             @id @default(autoincrement())
  userId          Int
  bookId          Int
  interactionType InteractionType
  book            Book            @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId, interactionType])
  @@index([userId])
  @@index([bookId])
}

enum Language {
  PORTUGUESE
  ENGLISH
}

enum Genre {
  ROMANCE
  FANFIC
  BUSINESS
  ADVENTURE
  HORROR
  RELIGION
  HISTORY
  SELF_HELP
  CLASSIC
  BIOGRAPHY
}

enum Role {
  USER
  ADMIN
}

enum InteractionType {
  SAVED
  DOWNLOADED
  READING
  READ
}
